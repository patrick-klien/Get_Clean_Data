library(datasets)
data(iris)
?iris
head(iris)
?subset
?sapply
sapply(iris, mean Species = virginica)
sapply(iris, mean, Species = virginica)
iris
sapply(iris, mean, Species = "virginica")
subset(iris, Species = "virginica")
?subset
subset(iris, Species = "virginica")
subset(iris, irisSpecies = "virginica")
subset(iris, iris$Species = "virginica")
iris$Species
iris$Species[virginica]
iris$Species["virginica"]
iris$Species("virginica")
sapply(iris, mean, iris$Species = virginica)
sapply(iris, mean, iris$Species == virginica)
?sapply
?subset
subset(iris, Species = virginica)
subset(iris, Species = "virginica")
subset(iris, iris$Species = "virginica")
subset(iris, iris$Species"virginica")
subset(iris, "virginica")
summary(isi)
summary(iris)
class(iris)
iris[,,,,virginica]
iris[,,,,"virginica"]
iris[,"virginica"]
iris["virginica"]
iris[virginica]
?lapply
lapply(mean, iris)
lapply(mean, iris@$Sepal.Length)
sapplhy
?sapply
sapply(iris, mean)
sapply(iris, mean, iris$Species)
sapply(iris, mean, iris$Species = virginica)
?subset
subset(iris, Species = "virginica")
subset(iris, Species = "virginica", select = Seapl.Length)
subset(iris, Species = "virginica", select = Sepal.Length)
subset(iris, Species = virginica, select = Sepal.Length)
subset(iris, Species = virginica, select = Sepal.Length)
subset(iris, Species = "virginica", select = Sepal.Length)
subset(iris, Species = 'virginica', select = Sepal.Length)
subset(iris, iris$Species = 'virginica', select = Sepal.Length)
iris$Species = "virginica"
iris$species
iris$Species
library(datasets)
data(iris)
iris
head(iris)
subset(iris, Species == 'virginica', select = Sepal.Length)
mean(subset(iris, Species == 'virginica', select = Sepal.Length))
xp <- subset(iris, Species == 'virginica', select = Sepal.Length)
sapply(xp, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
?apply
data(mtcars)
?mtcars
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
?split
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-8263636
209.21429-82.63636
?tapply
tapply(iris, Species = virginica, mean)
tapply(iris, Species = "virginica", mean)
tapply(iris, Species == "virginica", mean)
tapply(iris, "virginica", mean)
tapply(iris, virginica, mean)
str(iris)
set.seed(1)
rpois(5,2)
?rpois
?qpois
set.seed(10)
x <- rbinom(10,10,0.5)
e <- rnomr(10,0,20)
e <- rnorm(10,0,20)
y <- 0.5 +2*x +e
y
x
?rbinom
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
x1 <- 1
x2 <- 2
x1 <- 1
fit <- lm(y ~ x1 + x2)
summaryRproof()
summaryRprof()
summary(Rprof)
class(Rprof)
?Rprof
summaryRprof()
?summaryRprof
source('~/Google Drive/Pessoal/Coursera/datasciencecoursera/HW2/ProgrammingAssignment2/cachematrix.R')
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
source('~/Google Drive/Pessoal/Coursera/datasciencecoursera/HW2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
m$get()
m = makeCacheMatrix(x)
cacheSolve(m)
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
source('~/Google Drive/Pessoal/Coursera/datasciencecoursera/HW2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m)
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
cacheSolve(m)
source('~/Google Drive/Pessoal/Coursera/datasciencecoursera/HW2/ProgrammingAssignment2/cachematrix.R')
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
source('~/Google Drive/Pessoal/Coursera/datasciencecoursera/HW2/ProgrammingAssignment2/cachematrix.R')
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
swirl
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
?read.csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
?cran
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -5:size)
select(cran, X:size)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version == !is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran, ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- selectra(cran, ip_id, package, size)
cran3 <- selectr(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2ˆ20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
cran3
cran3
mutate(cran3, size_mb = size / 2ˆ20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20)
cran
cran3
mutate(mutate(cran3, size_mb = size / 2^20), size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(httr)
oath_endpoints("github")
oath_endpoints("github")
install.packages(httpuv)
install.packages("httpuv")
setwd("~/Google Drive/Pessoal/Coursera/datasciencecoursera/Getting and Cleaning Data/Quiz 2")
mydf <- read.csv(getdata-data-ss06pid.csv)
?read.csv
mydf <- read.csv("getdata-data-ss06pid.csv")
install.packages("sqldf")
library(sqldf)
df
mydf
head(mydf)
acs <- mydf
sqldf("select * from acs")
sqldf("select pwgtp1 from acs where AGEP < 50")
res1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
head res1
head(res1)
?unique
unique(acs$AGEP)
sqldf("select AGEP where unique from acs")
sqldf("select distinct AGEP from acs")
sqldf("select unique * from acs")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlcode
htmlCode
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
?read.table
fname <- "getdata-wksst8110-2.for"
read.fwf(fname, c(1,9,5,4,4,5,4,4,5,4,4,5,4,4))
ans5 <- read.fwf(fname, c(1,9,5,4,4,5,4,4,5,4,4,5,4,4))
str(ans5)
head(ans5)
ans51 <- subset(ans5, select = v4)
ans51 <- subset(ans5, select "v4")
?subset
ans51 <- ans5$V4
ans51
class(ans51)
str(ans51)
head(ans51)
size(ans51)
length(ans51)
ans51 <- ans51[4:1258]
ans51
head(ans51)
length(ans51)
ans51 <- ans51[2:1255]
ans51
ans52 <- ans5$V9
ans5
head(ans5)
ans51 <- ans5$V7
length(ans51)
head(ans51)
ans51 <- ans51[5:1258]
ans51
ans52 <- ans5$V14
ans52 <- ans52[5:1258]
ans51
sum(ans51)
sum(as.numeric(ans51))
sum(as.numeric(ans51)) + sum(as.numeric(ans52))
ans52
sum(as.numeric(ans52))
ans53 <- as.numeric(ans52)
ans54
ans53
?read.fwf
?colClasses
??colClasses
?colClasses
?read.fwf
class(ans5)
ans5$V14
a51 <- ans5$V14[5:1258]
a51
sum(a51)
?factor
a51 <- as.numeric(ans5$V14[5:1258])
a51
a51 <- unclass(a51)
a51
a51
a51 <- unclass(ans5$V14[5:1258])
a51
summary(a51)
?read.fwf
read.fwf(fname, c(1,9,5,4,4,5,4,4,5,4,4,5,4,4), skip =5)
ans5 <- read.fwf(fname, c(1,9,5,4,4,5,4,4,5,4,4,5,4,4), skip =5)
head(ans5)
sum(ans5$V14)
sum(ans5$V7)
36.2+32401.6
ans5 <- read.fwf(fname, c(1,9,5,4,4,5,4,4,5,4,4,5,4,4), skip = 4)
head(ans5)
sum(ans5$V7) + sum(ans5$V14)
ans5 <- read.fwf(fname, c(1,9,5,4,4,5,4,4,5,4,4,5,4,4), skip = 3)
sum(ans5$V7) + sum(ans5$V14)
head(ans5)
ans5 <- read.fwf(fname, c(1,9,5,4,4,5,4,4,5,4,4,5,4,4), skip = 4)
sum(ans5$V7) + sum(ans5$V14)
sum(ans5$V8) + sum(ans5$V14)
head(ans5)
tail(ans5)
sum(ans5$V7) + sum(ans5$V14)
sum(ans5$V7)
sum(ans5$V14)
setwd("~/Google Drive/Pessoal/Coursera/datasciencecoursera/Getting and Cleaning Data/Course Project/UCI HAR Dataset/test")
?read.table
y_test <- read.table("y_test.txt")
y
y_T
y_test
x_test <- read.table("X_test.txt")
?cbind
test <- cbind (y_test, x_test)
test
x_test
head(x_test)
128*3
561/3
561/9
head(test)
subset(test, V1 == 5)
test5,  <- subset(test, V1 == 5)
test5 <- subset(test, V1 == 5)
str(test5)
str(test)
